#!/usr/bin/python
try:
    import pynotify, pystray
except ImportError:
    print 'Import failed. Package install required.\nsudo pip2 install pynotify pystray'
    exit(1)
import sys, argparse, os.path, re, time
from datetime import datetime
import xml.etree.ElementTree as etree

def str_to_datetime(line):
    ret = datetime.strptime(line[:19], '%Y-%m-%dT%H:%M:%S')
    if ret.year < 1970: # it happened before the epoch, invalid date
        ret = None
    return ret

class tracker_ui:
    def __init__(self):
        pynotify.init('tracker')
        self.data = tracker()
        self.__show_selected()

    def __show_selected(self, sleep=1200):
        selected = self.data.selected()
        notice = pynotify.Notification(selected['Summary'], selected['Description'])
        notice.show()

class tracker:
    def __init__(self):
        self.task_file = os.path.expanduser('~/.config/tracker/tasks.xml')
        if os.path.exists(self.task_file):
            self.tasks = etree.ElementTree(file=self.task_file)
        self.__elements()

    def __getitem__(self, key):
        return self.elements[key]

    def keys(self):
        return self.elements.keys()

    def selected(self):
        for key in self.elements.keys():
            if self.elements[key]['InProgress']:
                return self.elements[key]

    def __element(self, task):
        data = { key : task.find(key).text for key in ['Summary', 'Description'] }
        data['Priority'] = task.attrib['Priority']
        data['InProgress'] = task.attrib['InProgress'] == 'true'
        data['Date'] = str_to_datetime(task.attrib['Date'])
        for key in ['Start', 'Finished']:
            data[key] = str_to_datetime(task.find(key).text)
        worked = []
        for date in task.find('Worked').findall('dateTime'):
            worked.append(str_to_datetime(date.text))
        data['Worked'] = worked
        subtasks = []
        for subtask in task.find('Subtasks').findall('Subtask'):
            sub_data = {}
            for key in ['ID', 'Priority']:
                sub_data[key] = subtask.attrib[key]
            sub_data['Finished'] = str_to_datetime(subtask.attrib['Finished'])
            sub_data['Description'] = subtask.find('Description').text
            sub_worked = []
            for date in subtask.find('Worked').findall('dateTime'):
                sub_worked.append(str_to_datetime(date.text))
            sub_data['Worked'] = sub_worked
            subtasks.append(sub_data)
        data['Subtasks'] = subtasks
        return data

    def __elements(self):
        self.elements = {}
        for task in self.tasks.getroot().find('Tasks').findall('Task'):
            self.elements[task.attrib['ID']] = self.__element(task)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Task Tracker: Keeps track of current tasks, nags user to stay on track", formatter_class=argparse.RawDescriptionHelpFormatter)

    tracker_ui()

